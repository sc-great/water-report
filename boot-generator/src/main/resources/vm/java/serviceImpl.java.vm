package ${packageName}.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.boot.Common;
#if($dataScope)
import com.boot.common.annotation.DataScope;
#end
#if($table.tree)
import java.util.ArrayList;
import com.boot.common.core.domain.Ztree;
#end
#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.boot.common.utils.DateUtils;
#break
#end
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.boot.common.core.text.Convert;
import org.springframework.transaction.annotation.Transactional;

/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public int add(${ClassName} ${className}) {
        #foreach ($column in $columns)
            #if($column.javaField == 'createTime')
                ${className}.setCreateTime(DateUtils.getTime());
            #end
        #end
        return ${className}Mapper.insert(${className});
    }
    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public int update(${ClassName} ${className}) {
        #foreach ($column in $columns)
            #if($column.javaField == 'createTime')
                ${className}.setUpdateTime(DateUtils.getTime());
            #end
        #end
        return ${className}Mapper.update(${className});
    }
    /**
     * 删除${functionName}对象
     *
     * @param ids 需要删除的数据ID
     * @return 结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public int deleteByIds(String ids) {
        int result=0;
        if(!ids.isEmpty()){
            ${ClassName} ${className}=new ${ClassName}();
            ${className}.getParams().put("ids",Convert.toStrArray(ids));
            result=${className}Mapper.delete(${className});
        }
        return result;
    }
    /**
    * 查询${functionName}数量
    *
    * @param ${className} 查询条件
    * @return ${functionName}数量
    */
    @Override
    public int getCount(${ClassName} ${className}){
        return ${className}Mapper.getCount(${className});
    }
    /**
     * 获取${functionName}实体对象
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    @Override
    public ${ClassName} getEntityById(${pkColumn.javaType} ${pkColumn.javaField}) {
        ${ClassName} ${className}=new ${ClassName}();
        ${className}.set${pkColumn.javaField.substring(0,1).toUpperCase()}${pkColumn.javaField.substring(1)}(${pkColumn.javaField});
        return ${className}Mapper.getEntity(${className});
    }

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    #if($dataScope)
    @DataScope(deptAlias = "t",userAlias = "t")
    #end
    public List<${ClassName}> getList(${ClassName} ${className}) {
        return ${className}Mapper.getList(${className});
    }
#if($table.tree)
    /**
     * 查询${functionName}树列表
     * 
     * @return 所有${functionName}信息
     */
    @Override
    public List<Ztree> getTree(${ClassName} ${className}) {
        List<${ClassName}> ${className}List = ${className}Mapper.getList(${className});
        List<Ztree> ztrees = new ArrayList<Ztree>();
        for (${ClassName} ${className} : ${className}List)
        {
            Ztree ztree = new Ztree();
            #set($TreeCode=$treeCode.substring(0,1).toUpperCase() + ${treeCode.substring(1)})
            #set($TreeParentCode=$treeParentCode.substring(0,1).toUpperCase() + ${treeParentCode.substring(1)})
            #set($TreeName=$treeName.substring(0,1).toUpperCase() + ${treeName.substring(1)})
            ztree.setId(${className}.get${TreeCode}());
            ztree.setpId(${className}.get${TreeParentCode}());
            ztree.setName(${className}.get${TreeName}());
            ztree.setTitle(${className}.get${TreeName}());
            ztrees.add(ztree);
        }
        return ztrees;
    }
#end
}